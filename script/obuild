#!/usr/bin/env perl

use common::sense;

use Cwd 'abs_path', 'getcwd';
use Dir::Self;
use File::Basename;


# obuild's installation path.
my $rootdir = abs_path (dirname __DIR__);
my $curdir = getcwd;


sub if_generated (&$) {
   if (open my $fh, '<', $_[1]) {
      my $line = <$fh>;
      $_[0]->($_ = $_[1])
         if $line =~ /Generated by obuild/;
   } elsif (not -f $_[1]) {
      $_[0]->($_ = $_[1])
   }
}

sub getbuilddir {
   while (not -d '_build') {
      my $cwd = getcwd;
      chdir "..";
      chdir $curdir and last
         if getcwd eq $cwd;
   }

   my $projdir = getcwd;
   my ($reldir) = $curdir =~ m|$projdir(?:/_build)?/(.+)|;
   # Insert "_build" between $projdir and the relative builddir.
   ($projdir, "$projdir/_build/$reldir", $reldir || '.')
}

# Find the current project directory and change to it,
# putting the relative subdir into $builddir.
my ($projdir, $builddir, $reldir) = getbuilddir;

# Directories we will produce during build.
my @builddirs = (
   "_build",
   "_install",
   "_tests",
);

# Just print installation path.
if ($ARGV[0] eq '--where') {
   print $rootdir;
   exit;
}

# Print project root path.
if ($ARGV[0] eq '--project') {
   print $projdir;
   exit;
}

# Remove build directories and generated files.
if ($ARGV[0] eq '--clean') {
   print "*** obuild: cleaning up\n";
   system "rm", "-rf", @builddirs;
   system "rm", "-f", ".times", glob ".*omakedb*";
   system "find", ".", "-name", "*.omc", "-delete";

   if_generated { unlink $_ } 'OMakeroot';
   if_generated { unlink $_ } '.cvsignore';

   exit;
}

if ($ARGV[0] eq '--no-default') {
   shift @ARGV;
} else {
   # Generate a default OMakeroot and .cvsignore if no user supplied ones exist.
   if_generated {
      open my $fh, '>', $_[0]
         or die "Could not create $_[0]: $!";
      say $fh "# Generated by obuild";
      say $fh "open rules/default";
   } 'OMakeroot';
   if_generated {
      my %ignore = map { $_ => undef } do {
         my @ignore = @builddirs;
         if (open my $gitignore, '<', '.gitignore') {
            chomp and push @ignore, $_
               for <$gitignore>
         }
         @ignore
      };

      open my $fh, '>', $_[0]
         or die "Could not create $_[0]: $!";
      say $fh "# Generated by obuild";
      say $fh $_ for sort keys %ignore;
   } '.cvsignore';
}

# Preserve OMake stdlib location.
my ($STDLIB) = `omake --version` =~ /Default library directory : (.+)/;

# Add obuild path to OMake's include path.
$ENV{OMAKEPATH} = "$STDLIB:$rootdir";

# Change to relative build directory.
my $targets = do {
   if (my @targets = grep { !/^-/ } @ARGV) {
      join ", ", @targets
   } else {
      ".DEFAULT"
   }
};
print "*** obuild: building $targets in $reldir\n";
chdir $builddir
   or die "could not chdir to '$builddir': $!";

# Kick off build with user-supplied arguments.
exec "omake", "rootdir=$rootdir", @ARGV;
