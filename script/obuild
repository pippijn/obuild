#!/usr/bin/env perl

use common::sense;

use Cwd 'abs_path';
use Dir::Self;
use File::Basename;


sub if_generated (&$) {
   if (open my $fh, '<', $_[1]) {
      my $line = <$fh>;
      $_[0]->($_ = $_[1])
         if $line =~ /Generated by obuild/;
   } elsif (not -f $_[1]) {
      $_[0]->($_ = $_[1])
   }
}


# obuild's installation path.
my $rootdir = abs_path (dirname __DIR__);

# Directories we will produce during build.
my @builddirs = (
   "_build",
   "_install",
   "_tests",
);

# Just print installation path.
if ($ARGV[0] eq '--where') {
   print "$rootdir\n";
   exit;
}

# Remove build directories and generated files.
if ($ARGV[0] eq '--clean') {
   print "*** obuild: cleaning up\n";
   system "rm", "-rf", @builddirs;
   system "rm", "-f", ".times", glob ".*omakedb*";
   system "find", ".", "-name", "*.omc", "-delete";

   if_generated { unlink $_ } 'OMakeroot';
   if_generated { unlink $_ } '.cvsignore';

   exit;
}

# Generate a default OMakeroot and .cvsignore if no user supplied ones exist.
if_generated {
   open my $fh, '>', $_[0]
      or die "Could not create $_[0]: $!";
   say $fh "# Generated by obuild";
   say $fh "open rules/default";
} 'OMakeroot';
if_generated {
   my %ignore = map { $_ => undef } do {
      my @ignore = @builddirs;
      if (open my $gitignore, '<', '.gitignore') {
         chomp and push @ignore, $_
            for <$gitignore>
      }
      @ignore
   };

   open my $fh, '>', $_[0]
      or die "Could not create $_[0]: $!";
   say $fh "# Generated by obuild";
   say $fh $_ for sort keys %ignore;
} '.cvsignore';

# Preserve OMake stdlib location.
my ($STDLIB) = `omake --version` =~ /Default library directory : (.+)/;

# Add obuild path to OMake's include path.
$ENV{OMAKEPATH} = "$STDLIB:$rootdir";

# Kick off build with user-supplied arguments.
exec "omake", "rootdir=$rootdir", @ARGV;
