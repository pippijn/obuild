#!/usr/bin/env perl

use common::sense;

use File::Find;


sub Modules {
   for my $i (0 .. $#_) {
      if ($_[$i] eq "Modules[] =") {
         return unless $_[$i - 1] eq "# Sources";
         for my $j ($i + 1 .. $#_) {
            return 1 if $_[$j] eq "";
            return 0 unless $_[$j] =~ /^\t[A-Z]\w+$/;
         }
      }
   }

   0
}


sub Requires {
   for my $i (0 .. $#_) {
      if ($_[$i] eq "Requires[] =") {
         return $_[$i - 1] eq "# Library dependencies"
      }
   }

   not (grep { /^Requires/ } @_)
}


sub Target {
   return unless $_[0] eq "# Target";
   return unless $_[1] =~ /^Target\t\t= \w+$/;
   return unless $_[2] =~ /^Description\t= /;
   return unless $_[3] =~ /^Version\t\t= \d+\.\d+/;
   return unless $_[4] eq "";
   return unless $_[5] eq "# Sources";
   return unless $_[6] eq "Modules[] =";

   return if grep { /\t=$/ } @_;

   1
}


sub need {
   my $what = shift;
   die "requirement '$what' not met in $File::Find::name" unless ($what->(@_))
}


my %format = (
   'ocaml-pack' => sub {
      my (@lines) = @_;

      need "Modules", @lines;
      need "Requires", @lines;
      need "Target", @lines;
   },
   'ocaml-library' => sub {
      my (@lines) = @_;

      need "Modules", @lines;
      need "Requires", @lines;
      need "Target", @lines;
   },
);


find {
   wanted => sub {
      # We check the format of OMakefiles
      $_ eq "OMakefile" or return;

      # Read OMakefile and skip empty ones
      my @lines = do { open my $fh, '<', $_ or die "$_: $!"; <$fh> };
      return unless @lines;

      # Remove new-line from every line
      chomp for @lines;

      my ($type) = split ' ', pop @lines;
      for ($format{$type}) {
         $_->(@lines) if defined
      }
   }
}, "src";
