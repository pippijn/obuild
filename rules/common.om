# Installation prefix.
if $(not $(defined prefix)):
  prefix	= /usr/local
  export

# The obuild root directory.
if $(not $(defined rootdir)):
  eprintln ($"Fatal error: rootdir is not defined")
  exit 1

# The root directory of the current project
if $(not $(defined projdir)):
  eprintln ($"Fatal error: projdir is not defined")
  exit 1

# Script directory.
scriptdir	= $(rootdir)/script

# Build directory.
builddir	= $(dir $(projdir)/_build)
# Directory to stage an install.
stagingdir	= $(dir $(projdir)/_install)
# Source directory.
srcdir		= $(dir $(projdir))
# Testsuite report directory.
testresultdir	= $(dir $(projdir)/testsuite)

# Derived directories.
bindir		= $(stagingdir)/bin
libdir		= $(stagingdir)/lib
includedir	= $(stagingdir)/include
datadir		= $(stagingdir)/share

# Absolute pathnames for the above.
abs_bindir	= $(absname $(bindir))
abs_libdir	= $(absname $(libdir))
abs_includedir	= $(absname $(includedir))
abs_datadir	= $(absname $(datadir))

# Recursive subdirectories
recurse-subdirs	= $(EMPTY)

# Clone directory hierarchy into vpath.
mkdir -p $(addprefix $(builddir)/, $(subdirs C, $(srcdir)))

# Build the project out-of-tree.
if $(not $(equal $(builddir), $(rootdir))):
  vmount (-l, $(srcdir), $(builddir)/$(srcdir))
  export

# Avoid omake complaining that the current directory is
# not part of the project.
add-project-directories (.)

# Topological sort in build order.
link-sort (objects) =
  value $(file-sort .BUILDORDER, $(objects))

.PHONY: nop upload install

install:
  if $(file-exists $(bindir)):
    mkdir $(DESTDIR)$(prefix)/bin
    foreach (bin, $(glob $(bindir)/*)):
      install $(bin) $(DESTDIR)$(prefix)/bin/
  if $(file-exists $(libdir)):
    mkdir $(DESTDIR)$(prefix)/lib
    foreach (lib, $(glob $(libdir)/*.*)):
      install $(lib) $(DESTDIR)$(prefix)/lib/
