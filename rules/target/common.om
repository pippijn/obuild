# Language targets
Builders[]	= $(EMPTY)

MainLanguage	= $(EMPTY)
Languages[]	= $(EMPTY)


replacesuffix (new-suffix, sequence) =
  return $(addsuffix $(new-suffix), $(removesuffix $(sequence)))


# Guess main language
private.guess-main-language (languages) =
  .STATIC: :key: $(languages)
    result =
      if $(equal $(length $(languages)), 0):
        msg-error (no source languages for $(Name))
      # ocaml > cxx > c
      if $(mem ocaml, $(languages)):
        value ocaml
      elseif $(mem aldor, $(languages)):
        value aldor
      elseif $(mem cxx, $(languages)):
        value cxx
      elseif $(mem c, $(languages)):
        value c
      else
        msg-error (cannot guess main source language for $(Name): $(languages))
    msg-notice (guessed main language for $(Name) as $(result))
  value $(result)


target-common () =
  ActiveBuilders[] = $(EMPTY)
  curdir = $(dir .)

  # Prepare all builders.
  foreach (l => ..., $(Builders)):
    private.REQUIRED = $(l.prepare)
    if $(REQUIRED):
      ActiveBuilders += $l
      Languages += $(l.languages)
      export
    export

  # Determine the target's main language
  if $(not $(nonempty $(MainLanguage))):
    MainLanguage = $(guess-main-language $(Languages))
    export MainLanguage

  # Find libraries
  foreach (l => ..., $(ActiveBuilders)):
    l.configure ()
    export

  # Propagate dependencies to subdirs.
  .SUBDIRS: $(recurse-subdirs)
    # subdirs with an OMakefile
    if $(file-exists OMakefile):
      include OMakefile
    # Recurse for each language builder.
    foreach (l => ..., $(ActiveBuilders)):
      l.recurse ()
      export

  export
