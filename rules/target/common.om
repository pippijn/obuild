# Main language of the target.
MainLanguage	= $(EMPTY)
# Other languages used for the target.
Languages[]	= $(EMPTY)


private.replacesuffix (new-suffix, sequence) =
  return $(addsuffix $(new-suffix), $(removesuffix $(sequence)))


private.languages. =
  extends $(Map)
  $|.c|		= c

  $|.cc|	= cxx
  $|.cp|	= cxx
  $|.cxx|	= cxx
  $|.cpp|	= cxx
  $|.CPP|	= cxx
  $|.c++|	= cxx
  $|.C|		= cxx

  $|.ml|	= ocaml


# Guess languages used
private.guess-languages (language, sources) =
  .STATIC: :key: $(sources)
    guesses = $(language)
    languages.foreach (k, v):
      export guesses
      foreach (s, $(replacesuffix $k, $(sources))):
        if $(target-exists $s):
          guesses += $v
    guesses = $(set $(guesses))
    msg-notice (guessed source languages for $(Name) as $(guesses))
  return $(guesses)


# Guess main language
private.guess-language (languages) =
  .STATIC: :key: $(languages)
    result =
      if $(equal $(length $(languages)), 0):
        msg-error (cannot guess source language for $(Name))
      if $(mem ocaml, $(languages)):
        value ocaml
      elseif $(mem cxx, $(languages)):
        value cxx
      elseif $(mem c, $(languages)):
        value c
      else
        msg-error (cannot guess main source language for $(Name): $(languages))
    msg-notice (guessed main language for $(Name) as $(result))
  value $(result)


private.language-prepare () =
  ocaml-prepare ()
  c-prepare ()
  export # whatever the functions above have produced


target-common () =
  export
  # Add "Sources" from other language-specific directives
  language-prepare ()

  # If the target languages are not defined, try to guess them.
  if $(not $(nonempty $(Languages))):
    Languages = $(guess-languages $(MainLanguage), $(Sources))

  # Determine the target's main language
  if $(not $(nonempty $(MainLanguage))):
    MainLanguage = $(guess-language $(Languages))

  # Find the required C libraries
  find-c-requires ()

  # Find OCaml libraries
  find-ocaml-requires ()
