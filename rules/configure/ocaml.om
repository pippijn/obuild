# Required OCaml libraries
OCaml-Requires	= $(EMPTY)

# OCaml module names, to be mapped to sources in ocaml-prepare.
Modules[]	= $(EMPTY)


private.ocamlfind (pkg) =
  .STATIC: :key: $(pkg)
    in_project = $(mem $(rootname $l), $(OCAML_LIBS_INSTALLED))
    msg-checking (for $(pkg))
    result =
      if $(in_project):
        value built in this project
      elseif $(equal $(shell-code ocamlfind -query $(pkg) >& /dev/null), 0):
        value $(shell ocamlfind -query $(pkg))
      else
        value false
    msg-found ($(result))
  value $(result)


find-ocaml-requires () =
  foreach (l, $(OCaml-Requires)):
    # System-installed or built within this project tree.
    if $(not $(ocamlfind $l)):
      msg-warn ($"package `$l' required for `$(Name)' not found")


private.map-modules (name, modules) =
  .STATIC: :key: $(dir .) $(modules)
    SOURCES[] = $(EMPTY)

    foreach (m, $(modules)):
      private.UC = $(file $(dirname $m)/$(capitalize $(basename $m)))
      private.LC = $(file $(dirname $m)/$(uncapitalize $(basename $m)))

      if $(equal $m, $(LC)):
        msg-error ($"module name `$m' in target $(name) does not follow OCaml conventions")

      export SOURCES

      if $(or $(file-exists $(LC).ml), $(target-exists $(LC).cmi)):
        SOURCES += $(LC)
      elseif $(or $(file-exists $(UC).ml), $(target-exists $(UC).cmi)):
        SOURCES += $(UC)
      else
        msg-warn ($"module `$m' for target $(name) does not exist
               and no rule to build it (tried $(UC) and $(LC))")
        SOURCES += $(LC)

  value $(SOURCES)


ocaml-recurse () =
  if $(OCaml-Requires):
    DEPEND = $(addsuffix /META, $(ocaml-filter-targets $(OCaml-Requires)))

    # Make all targets depend on its OCaml requirements.
    %.native %.byte %.cmxs %.cmxa %.cma %.cmx %.cmo %.cmi %.a %.o: $(DEPEND)
    .SCANNER: scan-ocaml-%: $(DEPEND)
    export
  export


ocaml-prepare () =
  ocaml-recurse ()
  OCaml-Sources[] = $(map-modules $(Name), $(set $(Modules)))
  if $(OCaml-Sources):
    MainLanguage = ocaml
    export
  export
