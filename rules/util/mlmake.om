mlmakedir = $(scriptdir)/mlmake

MLMAKE = ocaml -I $(scriptdir) mlmake/automake.ml
MLCONF = ocaml -I $(scriptdir) -I $(builddir) mlmake/configure.ml

private.OMAKEFILES	=
  foreach (x, $(top-srcdirs)):
    value $(find $x -name OMakefile.ml)
private.MLMAKESRC	= $(glob $(mlmakedir)/*)

OMAKEFILES = $(set $(OMAKEFILES))

.STATIC: $(MLMAKESRC) $(OMAKEFILES)
  msg-checking (what targets are installed in this project)

  private.MAKEFILES = $(builddir)/makefiles.ml
  echo "(* Generated at $(gettimeofday) *)" > $(MAKEFILES)
  foreach (f, $(OMAKEFILES)):
    echo $'#use "'$f$'";;'	>> $(MAKEFILES)

  OCAML_LIBS_INSTALLED = $(shell $(MLCONF) -ocaml-libs)
  C_LIBS_INSTALLED = $(shell $(MLCONF) -c-libs)
  PROGS_INSTALLED = $(shell $(MLCONF) -progs)

  msg-result ($"
    * $(length $(OCAML_LIBS_INSTALLED)) OCaml libraries
    * $(length $(C_LIBS_INSTALLED)) C/C++ libraries
    * $(length $(PROGS_INSTALLED)) programs")


private.is-generated (node) =
  # It doesn't exist, yet, or it contains a "# Generated" line.
  value $(or $(not $(file-exists $(node))), $(grep q, $"# Generated", $(node)))


# Tell omake that its files can be generated.
%OMakefile: %OMakefile.ml
  if $(is-generated $@):
    $(MLMAKE) $@


recurse-into (dirs) =
  .SUBDIRS: $(dirs)
    .INCLUDE: OMakefile: $(MLMAKESRC) OMakefile.ml
      if $(and $(file-exists OMakefile.ml), $(is-generated OMakefile)):
        # Generate OMakefile with mlmake.
        $(MLMAKE) $@
      elseif $(not $(file-exists OMakefile)):
        touch $@
