open rules/build/c/common


libname (name) =
  value $(LIBPRE)$(name)$(LIBEXT)

dllname (name) =
  value $(DLLPRE)$(name)$(DLLEXT)

libobjname (sources) =
  value $(addsuffix $(libsuffix)$(OBJEXT), $(removesuffix $(sources)))

dllobjname (sources) =
  value $(addsuffix $(dllsuffix)$(OBJEXT), $(removesuffix $(sources)))


###########################################################
# :: Static library (.a or .lib)
###########################################################

private.static-library (name, sources) =
  private.LIB		= $(libname $(name))
  private.OBJECTS	= $(libobjname $(sources))

  $(LIB): $(OBJECTS)
    $(AR) cru $@ $^

  value $(LIB)


###########################################################
# :: Shared library (.so or .dll)
###########################################################

private.shared-library (name, sources) =
  private.LIB		= $(dllname $(name))
  private.OBJECTS	= $(dllobjname $(sources))

  $(LIB): $(OBJECTS)
    $(LINKER) -shared -o $@ $^ $(LDFLAGS)

  value $(LIB)


###########################################################
# :: C++ library, static and/or shared.
###########################################################

c-library (name, sources) =
  FILES[]	= $(EMPTY)

  .SCANNER: scan-c-%.c: $(Headers)
  .SCANNER: scan-c-%.cpp: $(Headers)

  # If there are C++ sources in the target, use the C++ linker,
  # otherwise use the C linker.
  LINKER = $(if $(mem cpp, $(Languages)), $(CXXLD), $(CCLD))

  if $(STATIC):
    FILES += $(static-library $(name), $(sources))
    export
  if $(SHARED):
    FILES += $(shared-library $(name), $(sources))
    export

  value $(FILES)


c-library-install () =
  value $(install-target $(c-libdir), $(c-library))
