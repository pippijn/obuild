open rules/build/c/compile
open rules/build/c/pkg-config


libname (name) =
  value $(LIBPRE)$(name)$(LIBEXT)

dllname (name) =
  value $(DLLPRE)$(name)$(DLLEXT)

libobjname (sources) =
  value $(addsuffix $(libsuffix)$(OBJEXT), $(removesuffix $(sources)))

dllobjname (sources) =
  value $(addsuffix $(dllsuffix)$(OBJEXT), $(removesuffix $(sources)))


###########################################################
# :: Static library (.a or .lib)
###########################################################

private.static-library () =
  private.LIB		= $(libname $(Name))
  private.OBJECTS	= $(libobjname $(Sources))

  $(LIB): $(OBJECTS)
    $(AR) cru $@ $^

  value $(LIB)


###########################################################
# :: Shared library (.so or .dll)
###########################################################

private.shared-library () =
  private.LIB		= $(dllname $(Name))
  private.OBJECTS	= $(dllobjname $(Sources))

  # If there are C++ sources in the target, use the C++ linker,
  # otherwise use the C linker.
  private.LINKER	= $(if $(mem cxx, $(Languages)), $(CXXLD), $(CCLD))

  $(LIB): $(OBJECTS)
    $(LINKER) -shared -o $@ $^ $(om_LDFLAGS)

  value $(LIB)


###########################################################
# :: C++ library, static and/or shared.
###########################################################

c-library () =
  private.FILES[] = $(EMPTY)

  if $(STATIC):
    FILES += $(static-library)
    export FILES
  if $(SHARED):
    FILES += $(shared-library)
    export FILES

  value $(FILES)


c-library-install () =
  private.FILES[] = $(install-target $(c-libdir), $(c-library))
  install-pkg-config ($(FILES))
