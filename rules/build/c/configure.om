# Required C libraries.
C-Requires	= $(EMPTY)
# Headers in this target.
C-Headers[]	= $(EMPTY)

# Build static library (.lib/.a).
STATIC		= true
# Build shared library (.dll/.so).
SHARED		= true


static.	=
  AR	= $(check-prog ar)
  CC	= $(check-prog gcc cc)
  CXX	= $(check-prog g++ c++ CC)
  CPP	= $(check-prog cpp)

CCLD		= $(CC)
CXXLD		= $(CXX)

# Don't allow undefined symbols in shared libraries.
LDSTRICT	= -Wl,-z,defs

# These are set by the build system.
om_CPPFLAGS	= -I$(includedir) $`(PC_CFLAGS)
om_CFLAGS	= -ggdb3 -std=c89
om_CXXFLAGS	= -ggdb3 -std=c++0x
om_LDFLAGS	= -L$(libdir) -Wl,-rpath,$(absname $(libdir)) $`(PC_LDFLAGS) $`(LDSTRICT)

# pkg-config flags
PC_CFLAGS	= $(EMPTY)
PC_LDFLAGS	= $(EMPTY)

# These are for use in target descriptions.
OM_CPPFLAGS	= $(EMPTY)
OM_CFLAGS	= $(EMPTY)
OM_CXXFLAGS	= $(EMPTY)
OM_LDFLAGS	= $(EMPTY)

# These are for users to set on the command line.
CPPFLAGS	= $(EMPTY)
CFLAGS		= $(EMPTY)
CXXFLAGS	= $(EMPTY)
LDFLAGS		= $(EMPTY)

# Append user and maintainer flags:
om_CPPFLAGS	+= $`(OM_CPPFLAGS) $`(CPPFLAGS)
om_CFLAGS	+= $`(OM_CFLAGS)   $`(CFLAGS)
om_CXXFLAGS	+= $`(OM_CXXFLAGS) $`(CXXFLAGS)
om_LDFLAGS	+= $`(OM_LDFLAGS)  $`(LDFLAGS)


# .pic causes the compiler to produce position independent code;
# see compile.om.
libsuffix = $(EMPTY)
dllsuffix = .pic


private.try-link (ldflags) =
  tmp_src	= $(file $(tmpfile omake, .c))
  tmp_exe	= $(file $(replacesuffixes .c, $"$(EXEEXT)", $(tmp_src)))

  program = $"""
int
main (void)
{
  return 0;
}
"""

  fprint ($(tmp_src), $(program))

  result = $(shell-success-null $(CC) -o $(tmp_exe) $(tmp_src) $(ldflags))

  rm -f $(tmp_src) $(tmp_exe)
  value $(result)


private.version-requirement (kind) =
  switch $(kind)
  case >=:
    value atleast-version
  case =:
    value exact-version
  case <=:
    value max-version
  default:
    msg-error ($"expected >=, = or <=: $(kind)")


private.check-versions (requirements) =
  if $(lt $(length $(requirements)), 2):
    msg-error ($"version requirements invalid: $(requirements)")

  kind = $(version-requirement $(nth 0, $(requirements)))
  ver = $(nth 1, $(requirements))
  if $(not $(pkg-exists --$(kind)=$(ver) $(pkg))):
    msg-warn (package $(pkg) is version $(pkg-config --modversion $(pkg)))
    msg-warn (but $(Name) needs $(kind) $(ver))
  if $(gt $(length $(requirements)), 2):
    check-versions ($(nth-tl 2, $(requirements)))


find-c-package (requirements) =
  private.pkg = $(nth 0, $(requirements))
  .STATIC: :key: $(pkg)
    msg-checking (for C library $(pkg))
    export PKG_CFLAGS PKG_LDFLAGS PKG
    if $(nonempty $(pkg-config-name $(pkg))):
      msg-found (built in this project)
      # TODO: use pkg-config and point it at our staging directory
      PKG_CFLAGS	= $(EMPTY)
      PKG_LDFLAGS	= -l$(pkg)
      PKG		= $(pkg-config-name $(pkg))
    elseif $(pkg-exists $(pkg)):
      msg-found ($(pkg-config --modversion $(pkg)))
      # If the version doesn't match, warn about it but continue, anyway.
      if $(ge $(length $l), 2):
        check-versions ($(nth-tl 1, $l))
      PKG_CFLAGS	= $(pkg-config --cflags $(pkg))
      PKG_LDFLAGS	= $(pkg-config --libs $(pkg))
      PKG		= $(EMPTY)
    else
      PKG_CFLAGS	= $(EMPTY)
      PKG_LDFLAGS	= -l$(pkg)
      PKG		= $(EMPTY)
      if $(try-link $(PKG_LDFLAGS)):
        msg-found ($(PKG_LDFLAGS))
        if $(ge $(length $l), 2):
          msg-warn ($"package $(pkg) does not carry version information; ignoring requirements")
      else
        msg-found (NOT FOUND)

  PC_CFLAGS	+= $(PKG_CFLAGS)
  PC_LDFLAGS	+= $(PKG_LDFLAGS)
  export PC_CFLAGS PC_LDFLAGS

  value $(PKG)


c-recurse () =
  private.HEADERS = $(addprefix $(curdir)/, $(C-Headers))

  # All target scanners at least depend on the local headers.
  .SCANNER: scan-c-%: $(HEADERS)
  .SCANNER: scan-cxx-%: $(HEADERS)

  DEPEND = $(EMPTY)
  if $(nonempty $(C-Requires)):
    DEPEND = $(pkg-config-name $(C-Requires))

    # Make all targets depend on its requirements.
    %$(OBJEXT): $(DEPEND)
    .SCANNER: scan-c-%: $(DEPEND)
    .SCANNER: scan-cxx-%: $(DEPEND)
    export .RULE DEPEND
  export


c-prepare () =
  export
  if $(nonempty $(C-Sources)):
    c-recurse ()
    value true


c-configure () =
  export PC_CFLAGS PC_LDFLAGS

  foreach (l => ..., $(C-Requires)):
    find-c-package ($l)
