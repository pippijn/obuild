# Required C libraries.
C-Requires	= $(EMPTY)
# Headers in this target.
Headers[]	= $(EMPTY)

# Build static library (.lib/.a).
STATIC		= true
# Build shared library (.dll/.so).
SHARED		= true


.STATIC:
  AR	= $(check-prog ar)
  CC	= $(check-prog gcc cc)
  CPP	= $(check-prog cpp)
  CXX	= $(check-prog g++ c++ CC)

CCLD		= $(CC)
CXXLD		= $(CXX)

CPPFLAGS	= -I$(includedir)
CFLAGS		= -ggdb3
CXXFLAGS	= -std=c++11
LDFLAGS		= -L$(libdir) -Wl,-rpath,$(absname $(libdir)) $`(LDSTRICT)

LDSTRICT	= -Wl,-z,defs


# Private variables for this omake module.
c-libdir	= $(libdir)

# .pic causes the compiler to produce position independent code;
# see compile.om.
libsuffix = $(EMPTY)
dllsuffix = .pic


private.version-requirement (kind) =
  switch $(kind)
  case >=:
    value atleast-version
  case =:
    value exact-version
  case <=:
    value max-version
  default:
    msg-error ($"expected >=, = or <=: $(kind)")


private.check-versions (requirements) =
  if $(lt $(length $(requirements)), 2):
    msg-error ($"version requirements invalid: $(requirements)")

  kind = $(version-requirement $(nth 0, $(requirements)))
  ver = $(nth 1, $(requirements))
  if $(not $(pkg-exists --$(kind)=$(ver) $(pkg))):
    msg-warn (package $(pkg) is version $(pkg-config --modversion $(pkg)))
    msg-warn (but $(Name) needs $(kind) $(ver))
  if $(gt $(length $(requirements)), 2):
    check-versions ($(nth-tl 2, $(requirements)))


find-c-package (requirements) =
  private.pkg = $(nth 0, $(requirements))
  .STATIC: :key: $(pkg)
    msg-checking (for C library $(pkg))
    if $(mem $(pkg), $(C_LIBS_INSTALLED)):
      msg-found (built in this project)
      # TODO: use pkg-config and point it at our staging directory
      PKG_CFLAGS	= $(EMPTY)
      PKG_LIBS		= -l$(pkg)
      export PKG_CFLAGS PKG_LIBS
    elseif $(pkg-exists $(pkg)):
      msg-found ($(pkg-config --modversion $(pkg)))
      # If the version doesn't match, warn about it but continue, anyway.
      if $(ge $(length $l), 2):
        check-versions ($(nth-tl 1, $l))
      PKG_CFLAGS	= $(pkg-config --cflags $(pkg))
      PKG_LIBS		= $(pkg-config --libs $(pkg))
      export PKG_CFLAGS PKG_LIBS
    else
      msg-found ($"-l$(pkg)")
      if $(ge $(length $l), 2):
        msg-warn ($"package $(pkg) does not carry version information; ignoring requirements")
      PKG_CFLAGS	= $(EMPTY)
      PKG_LIBS		= -l$(pkg)
      export PKG_CFLAGS PKG_LIBS

  CFLAGS	+= $(PKG_CFLAGS)
  CXXFLAGS	+= $(PKG_CFLAGS)
  LDFLAGS	+= $(PKG_LIBS)
  export CFLAGS CXXFLAGS LDFLAGS


find-c-requires () =
  export CFLAGS CXXFLAGS LDFLAGS

  foreach (l, $(C-Requires)):
    find-c-package ($l)


private.pkg-configs (targets) =
  private.TARGETS = $(intersection $(targets), $(C_LIBS_INSTALLED))
  value $(addprefix $(libdir)/pkg-config/, $(addsuffix .pc, $(TARGETS)))


c-prepare () =
  # All target scanners at least depend on the local headers.
  .SCANNER: scan-c-%: $(Headers)
  .SCANNER: scan-cxx-%: $(Headers)

  if $(nonempty $(C-Requires)):
    DEPEND = $(pkg-configs $(C-Requires))

    # Make all targets depend on its OCaml requirements.
    %$(OBJEXT): $(DEPEND)
    .SCANNER: scan-c-%: $(DEPEND)
    .SCANNER: scan-cxx-%: $(DEPEND)
    export
  export
