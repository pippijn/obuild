# Required OCaml libraries
OCaml-Requires	= $(EMPTY)

# OCaml module names, to be mapped to sources in ocaml-prepare.
Modules[]	= $(EMPTY)

NO_ANNOT		= false
OCAMLINCLUDES[]		= $(EMPTY)
COMPILEFLAGS		= $`(if $(NO_ANNOT), $(EMPTY), -annot) -principal -g
LINKFLAGS		= $(EMPTY) -g

OCAML_BYTE		= true
OCAML_NATIVE		= true
OCAML_PLUGIN		= true


static.	=
  OCAMLFIND	= $(check-prog ocamlfind)

# Private variables for this omake module.
ocaml-libdir	= $(libdir)/ocaml

# Let ocamlfind know about our staged install.
OCAMLFIND	= OCAMLPATH=$(ocaml-libdir) $(OCAMLFIND)

OCAMLC_FLAGS	= $(EMPTY)
OCAMLOPT_FLAGS	= $(EMPTY)
OCAMLDEP_FLAGS	= $(EMPTY)

OCamlC		= $(OCAMLFIND) ocamlc   $`(OCAMLFLAGS) $`(USERFLAGS) $`(OCAMLC_FLAGS)
OCamlOpt	= $(OCAMLFIND) ocamlopt $`(OCAMLFLAGS) $`(USERFLAGS) $`(OCAMLOPT_FLAGS)
OCamlDep	= $(OCAMLFIND) ocamldep $`(OCAMLFLAGS) $`(USERFLAGS) $`(OCAMLDEP_FLAGS)


###########################################################
# :: Find OCaml dependencies.
###########################################################

private.ocamlfind (pkg) =
  .STATIC: :key: $(pkg)
    in_project = $(mem $(rootname $l), $(OCAML_LIBS_INSTALLED))
    msg-checking (for OCaml package $(pkg))
    result =
      if $(in_project):
        value built in this project
      elseif $(shell-success-null ocamlfind -query $(pkg)):
        value $(shell ocamlfind -query $(pkg))
      else
        value false
    msg-found ($(result))
  value $(result)


find-ocaml-requires () =
  foreach (l, $(OCaml-Requires)):
    # System-installed or built within this project tree.
    if $(not $(ocamlfind $l)):
      msg-warn ($"package `$l' required for `$(Name)' not found")


private.map-modules (modules) =
  .STATIC: :key: $(dir .) $(modules)
    SOURCES[] = $(EMPTY)

    foreach (mod, $(modules)):
      private.UC = $(file $(dirname $(mod))/$(capitalize $(basename $(mod))))
      private.LC = $(file $(dirname $(mod))/$(uncapitalize $(basename $(mod))))

      if $(equal $(mod), $(LC)):
        msg-error ($"module name `$(mod)' in target $(Name) does not follow OCaml conventions")

      export SOURCES

      if $(or $(file-exists $(LC).ml), $(target-exists $(LC).cmi)):
        SOURCES += $(LC)
      elseif $(or $(file-exists $(UC).ml), $(target-exists $(UC).cmi)):
        SOURCES += $(UC)
      else
        msg-warn ($"module `$(mod)' for target $(Name) does not exist
               and no rule to build it (tried $(UC) and $(LC))")
        SOURCES += $(LC)

  value $(SOURCES)


private.filter-installed (targets) =
  private.TARGETS = $(intersection $(rootname $(targets)), $(OCAML_LIBS_INSTALLED))
  value $(addprefix $(ocaml-libdir)/, $(TARGETS))


ocaml-recurse () =
  private.OCAMLINCS = $(mapprefix -I, $(OCAMLINCLUDES) $(recurse-subdirs))
  private.OCAMLPACKS = $(EMPTY)

  if $(nonempty $(OCaml-Requires)):
    DEPEND = $(addsuffix /META, $(filter-installed $(OCaml-Requires)))
    OCAMLPACKS = -package $(concat \,, $(OCaml-Requires))

    # Make all targets depend on its OCaml requirements.
    %.cmi %.cmo %.cmx %$(OBJEXT): $(DEPEND)
    %.byte %.native$(EXEEXT): $(DEPEND)
    .SCANNER: scan-ocaml-%: $(DEPEND)
    export .RULE OCAMLPACKS

  OCAMLFLAGS = $(OCAMLPACKS) $(OCAMLINCS)
  export .RULE OCAMLFLAGS


ocaml-prepare () =
  ocaml-recurse ()
  OCaml-Sources[] = $(map-modules $(set $(Modules)))
  if $(nonempty $(OCaml-Sources)):
    MainLanguage = ocaml
    export
  export
