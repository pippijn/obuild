###########################################################
# :: OCaml pre-build target configuration.
###########################################################

OCaml-Sources[]		= $(EMPTY)
OCaml-Requires[]	= $(EMPTY)

# Extra include directories.
OCAML_INCLUDES		= $(EMPTY)

# Generate type annotation files.
OCAML_ANNOT		= $`(if $(not $(defined NO_ANNOT)),-annot)

# Build system.
om_OCAML_CFLAGS		= $(OCAML_ANNOT) -principal -g
om_OCAML_LDFLAGS	= $(EMPTY) -g

# Target description overrides.
OM_OCAML_CFLAGS		= $(EMPTY)
OM_OCAML_LDFLAGS	= $(EMPTY)

# Command line.
OCAML_CFLAGS		= $(EMPTY)
OCAML_LDFLAGS		= $(EMPTY)

# Append maintainer and user flags.
om_OCAML_CFLAGS		+= $`(OM_OCAML_CFLAGS)  $`(OCAML_CFLAGS)
om_OCAML_LDFLAGS	+= $`(OM_OCAML_LDFLAGS) $`(OCAML_LDFLAGS)

# What kind of outputs to produce.
OCAML_BYTE		= true
OCAML_NATIVE		= true
OCAML_PLUGIN		= true
OCAML_SYNTAX		= false

# Per-program flags.
OCAMLC_FLAGS		= $(EMPTY)
OCAMLOPT_FLAGS		= $(EMPTY)
OCAMLDEP_FLAGS		= $(EMPTY)


static.	=
  OCAMLFIND	= $(check-prog ocamlfind)

# Private variables for this omake module.
ocaml-libdir	= $(libdir)/ocaml

# Let ocamlfind know about our staged install.
OCAMLFIND	= OCAMLPATH=$(ocaml-libdir) $(OCAMLFIND)


###########################################################
# :: Find OCaml dependencies.
###########################################################

private.ocamlfind (pkg) =
  .STATIC: :key: $(pkg)
    in_project = $(ocaml-target-exists $(pkg))
    msg-checking (for OCaml package $(pkg))
    result =
      if $(in_project):
        value built in this project
      elseif $(shell-success-null ocamlfind -query $(pkg)):
        value $(shell ocamlfind -query $(pkg))
      else
        value false
    msg-found ($(result))
  value $(result)


has-ocaml-package (pkg) =
  if $(ocamlfind $(pkg)):
    value true
  else
    value false


private.map-modules (modules) =
  .STATIC: :key: $(dir .) $(modules)
    SOURCES[] = $(EMPTY)

    foreach (mod => ..., $(modules)):
      private.UC = $(file $(dirname $(mod))/$(capitalize $(basename $(mod))))
      private.LC = $(file $(dirname $(mod))/$(uncapitalize $(basename $(mod))))

      if $(equal $(mod), $(LC)):
        msg-error ($"module name `$(mod)' in target $(Name) does not follow OCaml conventions")

      export SOURCES

      if $(or $(file-exists $(LC).ml), $(target-exists $(LC).cmi)):
        SOURCES += $(LC)
      elseif $(or $(file-exists $(UC).ml), $(target-exists $(UC).cmi)):
        SOURCES += $(UC)
      else
        msg-warn ($"module `$(mod)' for target $(Name) does not exist
             and no rule to build it, yet (tried $(UC) and $(LC))")
        SOURCES += $(LC)

  value $(SOURCES)


ocaml-recurse () =
  private.OCAMLPACKS = $(EMPTY)

  if $(nonempty $(OCaml-Requires)):
    DEPEND = $(addsuffix /META, $(ocaml-filter-installed $(OCaml-Requires)))
    OCAMLPACKS = -package $(concat \,, $(OCaml-Requires))

    # Make all targets depend on its OCaml requirements.
    %.cmi %.cmo %.cmx %$(OBJEXT): $(DEPEND)
    %.byte %.native$(EXEEXT): $(DEPEND)
    .SCANNER: scan-ocaml-%: $(DEPEND)
    export .RULE OCAMLPACKS

  private.OCAMLFLAGS = $(OCAMLPACKS) $(mapprefix -I, $(OCAML_INCLUDES) $(recurse-subdirs))

  # Produce initial compiler command line here.
  OCamlC	= $(OCAMLFIND) ocamlc   $(OCAMLFLAGS) $`(OCAMLC_FLAGS)
  OCamlOpt	= $(OCAMLFIND) ocamlopt $(OCAMLFLAGS) $`(OCAMLOPT_FLAGS)
  OCamlDep	= $(OCAMLFIND) ocamldep $(OCAMLFLAGS) $`(OCAMLDEP_FLAGS)
  export .RULE OCamlC OCamlOpt OCamlDep


ocaml-prepare () =
  export
  if $(nonempty $(OCaml-Sources)):
    compute-recurse-subdirs ($(OCaml-Sources))

    ocaml-recurse ()
    OCAML_SOURCES[] = $(map-modules $(set $(OCaml-Sources)))

    # This target contains OCaml code.
    value true


ocaml-configure () =
  foreach (l => ..., $(OCaml-Requires)):
    # System-installed or built within this project tree.
    if $(not $(has-ocaml-package $l)):
      msg-warn ($"package `$l' required for `$(Name)' not found")
