###########################################################
# :: OCaml compilation rules.
###########################################################

open rules/build/common


# Sort objects in build-order and append link flags.
ocaml-link (objects) =
  value $(link-sort $(objects)) $(om_OCAML_LDFLAGS)


###########################################################
# :: OCaml dependency scanners.
###########################################################

private.print-dep (srcbase, srcsuff, targetbase) =
  targetbase = $(file $(targetbase))
  if $(target-exists $(targetbase).cmi):
    switch $(srcsuff)
    case .mli:
      println ($"$(srcbase).cmi: $(targetbase).cmi")
    case .ml:
      println ($"$(srcbase).cmo: $(targetbase).cmo")
      println ($"$(srcbase).cmx: $(targetbase).cmx")
    default:
      msg-error ($"unknown suffix for ocaml source file: $(srcsuff)")
    value true
  else
    value false


private.try-print-dep (prefix, srcbase, srcsuff, targetbase) =
  if $(print-dep $(srcbase), $(srcsuff),	\
       $(prefix)/$(targetbase)):
    value true
  elseif $(print-dep $(srcbase), $(srcsuff),	\
           $(prefix)/$(dirname $(targetbase))/$(uncapitalize $(basename $(targetbase)))):
    value true
  else
    value false


private.process-dep () =
  awk (b, $(stdin))
  case $'^\(.*\):[[:space:]]*\(.*\)$':
    srcbase	= $(removesuffix $1)
    srcsuff	= $(suffix $1)

    foreach (dep => ..., $(split $' ', $2)):
      foreach (mod => ..., $(OCaml-Sources)):
        if $(equal $(dep), $(basename $(mod))):
          if $(try-print-dep ., $(srcbase), $(srcsuff), $(mod)):
            value
          elseif $(try-print-dep $(curdir), $(srcbase), $(srcsuff), $(mod)):
            value
          else
            if $(curdir):
              msg-error (could not find source file for module '$(mod)')
            else
              msg-error (could not find source file for module '$(mod)' and curdir is not set)

  default:
    msg-error (invalid ocamldep output: $0)


Shell. +=
  ocaml-dep (argv) =
    process-dep ()


.SCANNER: scan-ocaml-%.mli: %.mli
  $(OCamlDep) $(USERFLAGS) -modules $< | ocaml-dep
  

.SCANNER: scan-ocaml-%.ml: %.ml
  $(OCamlDep) $(USERFLAGS) -modules $< | ocaml-dep


###########################################################
# :: Rules for compiling OCaml files.
###########################################################

%.cmx %$(OBJEXT): %.ml
  section rule:
    if $(or $(target-exists %.mli), $(OCAML_BYTE)):
      # If the .mli exists, we get the .cmi from that,
      # if byte-code is enabled, we produce the .cmi in its rule.
      %.cmx %$(OBJEXT): %.ml %.cmi :scanner: scan-ocaml-%.ml
        $(OCamlOpt) $(om_OCAML_CFLAGS) $(USERFLAGS) -c $<
    else
      # Otherwise, the .cmi is produced in this rule.
      %.cmx %.cmi %$(OBJEXT): %.ml :scanner: scan-ocaml-%.ml
        $(OCamlOpt) $(om_OCAML_CFLAGS) $(USERFLAGS) -c $<


%.cmo: %.ml
  section rule:
    if $(target-exists %.mli):
      %.cmo: %.ml %.cmi :scanner: scan-ocaml-%.ml
        $(OCamlC) $(om_OCAML_CFLAGS) $(USERFLAGS) -c $<
    else
      %.cmo %.cmi: %.ml :scanner: scan-ocaml-%.ml
        $(OCamlC) $(om_OCAML_CFLAGS) $(USERFLAGS) -c $<


%.cmi: %.ml
  section rule:
    if $(OCAML_BYTE):
      %.cmo %.cmi: %.ml :scanner: scan-ocaml-%.ml
        $(OCamlC) $(om_OCAML_CFLAGS) $(USERFLAGS) -c $<
    else
      %.cmx %.cmi %$(OBJEXT): %.ml :scanner: scan-ocaml-%.ml
        $(OCamlOpt) $(om_OCAML_CFLAGS) $(USERFLAGS) -c $<


%.cmi: %.mli :scanner: scan-ocaml-%.mli
  $(OCamlC) $(om_OCAML_CFLAGS) $(USERFLAGS) -c $<
