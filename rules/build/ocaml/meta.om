###########################################################
# :: OCaml META file generation.
###########################################################

private.OCAML_LIBS_INSTALLED	=
  value $(query -mainlang OCaml -kind library-install\,ocaml-pack-install\,syntax-extension-install -names)


ocaml-target-exists (library) =
  value $(mem $(rootname $(library)), $(OCAML_LIBS_INSTALLED))

ocaml-filter-installed (targets) =
  private.TARGETS = $(intersection $(rootname $(targets)), $(OCAML_LIBS_INSTALLED))
  value $(addprefix $(ocaml-libdir)/, $(TARGETS))



ocaml-meta (LIBDIR, ARCHIVES, FILES) =
  PA_META	=
    if $(ocaml-target-exists pa_$(Name)):
      value $(ocaml-libdir)/pa_$(Name)/META

  META		= $(LIBDIR)/META

  # Check if this target is a syntax extension and there is a support
  # library for this target. If so, add a runtime dependency on it to
  # the META file.
  private.SUPPORT = $(removeprefix pa_, $(Name))
  if $(not $(equal $(SUPPORT), $(Name))):
    if $(ocaml-target-exists $(SUPPORT)):
      OCaml-Requires += $(SUPPORT)
      export
    export

  # Rules
  $(META): $(ARCHIVES) $(FILES) $(PA_META)
    echo '# MD5 checksums for $(Name) files:'			>  $(META)
    foreach (f => ..., $(ARCHIVES)):
      echo '# $(basename $f)	$(digest $f)'			>> $(META)
    echo 'description="$(Description)"'				>> $(META)
    echo 'version="$(Version)"'					>> $(META)
    echo 'requires="$(OCaml-Requires)"'				>> $(META)
    if $(OCAML_BYTE):
      echo 'archive(byte)="$(Name).cma"'			>> $(META)
    if $(OCAML_NATIVE):
      echo 'archive(native)="$(Name).cmxa"'			>> $(META)
    if $(OCAML_PLUGIN):
      echo 'archive(plugin)="$(Name).cmxs"'			>> $(META)
    if $(OCAML_SYNTAX):
      echo 'archive(syntax, preprocessor) = "$(Name).cma"'	>> $(META)
    echo 'exists_if="$(basename $(ARCHIVES))"'	>> $(META)
    # If this is the support library for a syntax extension, add a
    # $(Name).syntax sub-package to the META file depending on the
    # syntax extension.
    if $(PA_META):
      echo							>> $(META)
      echo 'package "syntax" ('					>> $(META)
      echo '  description = "Syntax extension for $(Name)"'	>> $(META)
      echo '  version = "$(Version)"'				>> $(META)
      echo '  requires = "pa_$(Name)"'				>> $(META)
      echo '  archive(syntax, preprocessor) = "pa_$(Name).cma"'	>> $(META)
      echo ')'							>> $(META)

  value $(META)
