###########################################################
# :: OCaml library and syntax extension builder.
###########################################################

open rules/build/ocaml/compile
open rules/build/ocaml/meta


OCAML_LIBDIR		= $(ocaml-libdir)/$`(Name)

OCAML_LDFLAGS_BYTE	= $(EMPTY)
OCAML_LDFLAGS_NATIVE	= $(EMPTY)
OCAML_LDFLAGS_PLUGIN	= -cclib '-L.'


###########################################################
# :: OCaml library
###########################################################

private.ocaml-cma () =
  private.LIB		= $(Name).cma
  private.OBJECTS	= $(addsuffix .cmo, $(OCAML_SOURCES))

  $(LIB): $(OBJECTS) $(STUBLIB)
    $(OCamlC) $(ocaml-link $(OBJECTS)) $(OCAML_LDFLAGS_BYTE) -a $(USERFLAGS) -o $(LIB)

  value $(LIB)


private.ocaml-cmxa () =
  private.LIB		= $(Name).cmxa
  private.CLIB		= $(Name)$(LIBEXT)
  private.OBJECTS	= $(addsuffix .cmx, $(OCAML_SOURCES))
  private.COBJECTS	= $(addsuffix .o, $(OCAML_SOURCES))

  $(LIB) $(CLIB): $(OBJECTS) $(COBJECTS) $(STUBLIB)
    $(OCamlOpt) $(ocaml-link $(OBJECTS)) $(OCAML_LDFLAGS_NATIVE) -a $(USERFLAGS) -o $(LIB)

  value $(LIB) $(CLIB)


private.ocaml-cmxs () =
  private.LIB		= $(Name).cmxs
  private.OBJECTS	= $(addsuffix .cmx, $(OCAML_SOURCES))
  private.COBJECTS	= $(addsuffix .o, $(OCAML_SOURCES))

  if $(OCAML_NATIVE):
    # If a cmxa was built, we can link it together into a cmxs.
    $(LIB): $(Name).cmxa
      $(OCamlOpt) $< $(om_OCAML_LDFLAGS) $(OCAML_LDFLAGS_PLUGIN) $(USERFLAGS) -o $(LIB) -shared -linkall
  else
    # Otherwise, we build it from scratch.
    $(LIB): $(OBJECTS) $(COBJECTS) $(STUBLIB)
      $(OCamlOpt) $(ocaml-link $(OBJECTS)) $(OCAML_LDFLAGS_NATIVE) $(OCAML_LDFLAGS_PLUGIN) $(USERFLAGS) -o $(LIB) -shared

  value $(LIB)


private.stublib () =
  Name		= $(Name)_stubs
  # Make sure the language is not guessed as OCaml.
  OCaml-Sources	= $(EMPTY)
  # The stublib does not contain OCaml code.
  Languages	= $(filter-out ocaml, $(Languages))
  # Let the common code guess whether it's C++ or C.
  MainLanguage	= $(EMPTY)

  # The shared object is called dll$(Name)_stubs.
  DLLPRE	= dll
  # Compile the static library as PIC, as well.
  libsuffix	= $(dllsuffix)

  #LDFLAGS	+= -lasmrunp -L/usr/lib/ocaml
  LDSTRICT	= $(EMPTY)

  # Build the stublib.
  library ()


ocaml-library () =
  # Build-location of the stubs library.
  STUBLIB	= $(EMPTY)

  # If there are non-ocaml sources, we need a stublib.
  if $(nonempty $(C-Sources)):
    # Build the stublib,
    STUBLIB			= $(stublib)
    # and link the libraries against it
    om_OCAML_LDFLAGS	+= -cclib '-L$(OCAML_LIBDIR) -l$(Name)_stubs'
    OCAML_LDFLAGS_BYTE	+= -dllib '-l$(Name)_stubs'
    export STUBLIB om_OCAML_LDFLAGS OCAML_LDFLAGS_BYTE

  # If there are C++ sources in this target,
  # link against the C++ standard library.
  if $(mem cxx, $(Languages)):
    om_OCAML_LDFLAGS	+= -cclib '-lstdc++'
    export

  section:
    PC_LDFLAGS	= $(EMPTY)
    c-configure ()
    if $(nonempty $(PC_LDFLAGS)):
      om_OCAML_LDFLAGS	+= -cclib '$(PC_LDFLAGS)'
      export
    export om_OCAML_LDFLAGS

  if $(nonempty $(OM_LDFLAGS)):
    om_OCAML_LDFLAGS	+= -cclib '$(OM_LDFLAGS)'
    export

  private.ARCHIVES	= $(STUBLIB)

  # Select which files to build.
  if $(OCAML_BYTE):
    ARCHIVES += $(ocaml-cma)
    export ARCHIVES
  if $(OCAML_NATIVE):
    ARCHIVES += $(ocaml-cmxa)
    export ARCHIVES
  if $(OCAML_PLUGIN):
    ARCHIVES += $(ocaml-cmxs)
    export ARCHIVES

  value $(ARCHIVES)


private.stublibs = $(ocaml-libdir)/stublibs

$(stublibs):
  mkdir -p $@

private.copy-stublib () =
  private.dllname = dll$(Name)_stubs$(DLLEXT)
  private.dllpath = $(ocaml-libdir)/$(Name)/$(dllname)
  if $(target-exists $(dllpath)):
    $(stublibs)/$(dllname): $(dllpath) $(stublibs)
      ln-or-cp $< $@
    value $(stublibs)/$(dllname)


ocaml-library-install () =
  private.ARCHIVES	= $(install-target $(OCAML_LIBDIR), $(ocaml-library))

  # Install the .cmi and .cmx files.
  private.FILES = $(install-target $(OCAML_LIBDIR), $(addsuffix .cmi, $(OCAML_SOURCES)))
  if $(OCAML_NATIVE):
    FILES += $(install-target $(OCAML_LIBDIR), $(addsuffix .cmx, $(OCAML_SOURCES)))
    export FILES

  private.META = $(ocaml-meta $(OCAML_LIBDIR), $(ARCHIVES), $(FILES))
  $(META): $(copy-stublib)

  value $(META)


syntax-extension-install () =
  # Only build byte-code version for syntax extensions.
  OCAML_BYTE		= true
  OCAML_NATIVE		= false
  OCAML_PLUGIN		= false
  OCAML_SYNTAX		= true

  library-install ()
  export
