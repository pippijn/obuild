open rules/build/ocaml/common
open rules/build/ocaml/meta


OCAML_LIBDIR		= $(ocaml-libdir)/$`(Name)

LINKFLAGS_BYTE		= $(EMPTY)
LINKFLAGS_NATIVE	= $(EMPTY)
LINKFLAGS_PLUGIN	= -cclib '-L.'


###########################################################
# :: OCaml library
###########################################################

private.ocaml-cma (BASENAMES, STUBLIB) =
  private.LIB		= $(Name).cma
  private.OBJECTS	= $(addsuffix .cmo, $(BASENAMES))

  $(LIB): $(OBJECTS) $(STUBLIB)
    $(OCAMLC) $(ocaml-link $(OBJECTS)) $(LINKFLAGS_BYTE) -a -o $(LIB)

  value $(LIB)


private.ocaml-cmxa (BASENAMES, STUBLIB) =
  private.LIB		= $(Name).cmxa
  private.CLIB		= $(Name)$(LIBEXT)
  private.OBJECTS	= $(addsuffix .cmx, $(BASENAMES))
  private.COBJECTS	= $(addsuffix .o, $(BASENAMES))

  $(LIB) $(CLIB): $(OBJECTS) $(COBJECTS) $(STUBLIB)
    $(OCAMLOPT) $(ocaml-link $(OBJECTS)) $(LINKFLAGS_NATIVE) -a -o $(LIB)

  value $(LIB) $(CLIB)


private.ocaml-cmxs (BASENAMES, STUBLIB) =
  private.LIB		= $(Name).cmxs
  private.OBJECTS	= $(addsuffix .cmx, $(BASENAMES))
  private.COBJECTS	= $(addsuffix .o, $(BASENAMES))

  if $(OCAML_NATIVE):
    # If a cmxa was built, we can link it together into a cmxs.
    $(LIB): $(Name).cmxa
      $(OCAMLOPT) $< $(LINKFLAGS_PLUGIN) -o $(LIB) -shared -linkall
  else
    # Otherwise, we build it from scratch.
    $(LIB): $(OBJECTS) $(COBJECTS) $(STUBLIB)
      $(OCAMLOPT) $(ocaml-link $(OBJECTS)) $(LINKFLAGS_NATIVE) $(LINKFLAGS_PLUGIN) -o $(LIB) -shared

  value $(LIB)


private.stublib () =
  Name		= $(Name)_stubs
  # Make sure the language is not guessed as OCaml.
  Modules	= $(EMPTY)
  # Let the common code guess whether it's C++ or C.
  Language	= $(EMPTY)
  Languages	= $(filter-out ocaml, $(Languages))

  # The shared object is called dll$(Name)_stubs.
  DLLPRE	= dll
  # Compile the static library as PIC, as well.
  libsuffix	= $(dllsuffix)

  #LDFLAGS	+= -lasmrunp -L/usr/lib/ocaml
  LDSTRICT	= $(EMPTY)

  # Build the stublib.
  STUBLIB	= $(library .DEFAULT)

  value $(STUBLIB)


ocaml-library () =
  # Build-location of the stubs library.
  private.STUBLIB	= $(EMPTY)

  # If there are non-ocaml sources, we need a stublib.
  if $(Sources):
    # Build the stublib,
    STUBLIB		= $(stublib)
    # and link the libraries against it
    LINKFLAGS		+= -cclib '-L$(OCAML_LIBDIR) -l$(Name)_stubs'
    LINKFLAGS_BYTE	+= -dllib '-l$(Name)_stubs'
    export STUBLIB LINKFLAGS LINKFLAGS_BYTE

  # If there are C++ sources in this target,
  # link against the C++ standard library.
  if $(mem cxx, $(Languages)):
    LINKFLAGS	+= -cclib '-lstdc++'
    export

  section:
    LDFLAGS	= $(EMPTY)
    find-c-requires ()
    if $(LDFLAGS):
      LINKFLAGS	+= -cclib '$(LDFLAGS)'
      export
    export LINKFLAGS

  private.BASENAMES	= $(ocaml-basenames)

  private.ARCHIVES	= $(STUBLIB)
  # Select which files to build.
  if $(OCAML_BYTE):
    ARCHIVES += $(ocaml-cma $(BASENAMES), $(STUBLIB))
    export ARCHIVES
  if $(OCAML_NATIVE):
    ARCHIVES += $(ocaml-cmxa $(BASENAMES), $(STUBLIB))
    export ARCHIVES
  if $(OCAML_PLUGIN):
    ARCHIVES += $(ocaml-cmxs $(BASENAMES), $(STUBLIB))
    export ARCHIVES

  value $(ARCHIVES)


ocaml-library-install () =
  private.ARCHIVES	= $(install-target $(OCAML_LIBDIR), $(ocaml-library))

  private.BASENAMES	= $(ocaml-basenames)

  # Install the .cmi and .cmx files.
  private.FILES = $(install-target $(OCAML_LIBDIR), $(addsuffix .cmi, $(BASENAMES)))
  if $(OCAML_NATIVE):
    FILES += $(install-target $(OCAML_LIBDIR), $(addsuffix .cmx, $(BASENAMES)))
    export FILES

  META = $(ocaml-meta $(OCAML_LIBDIR), $(ARCHIVES), $(FILES))
  $(tag): $(META)

  value $(META)


#private.stublibs = $(ocaml-libdir)/stublibs

#$(stublibs):
#  mkdir -p $@

#.BUILD_SUCCESS: $(stublibs)
#  # Make links to the stublibs
#  foreach (lib, $(OCAML_LIBS_INSTALLED)):
#    dllname	= dll$(lib)_stubs$(DLLEXT)
#    dllpath	= $(ocaml-libdir)/$(lib)/$(dllname)
#    if $(file-exists $(dllpath)):
#      ln-or-cp $(dllpath) $(stublibs)/$(dllname)


syntax-extension-install (tag) =
  # Only build byte-code version for syntax extensions.
  OCAML_BYTE		= true
  OCAML_NATIVE		= false
  OCAML_PLUGIN		= false

  library-install (tag)
  export
