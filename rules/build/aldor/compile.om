###########################################################
# :: Compute each object's target-local dependencies.
###########################################################

dependencies-local (target) =
  .STATIC: :key: $(fullname $(target))
    DEPS		= $(EMPTY)
    LOCALDOMAINS	= $(basename $(InternalDomains) $(Domains))
    foreach (d, $(dependencies-all $(target))):
      if $(equal .ao, $(suffix $d)):
        if $(mem $(basename $(removesuffix $d)), $(LOCALDOMAINS)):
          DEPS = $(DEPS) $d
          export
        export
      export
    #eprintln ($"$(target) -> $(DEPS)")
    result = $(link-sort $(filter-out $(target), $(DEPS)))
  value $(result)


###########################################################
# :: Aldor compilation rules.
###########################################################

%.c %.ao: %.as $(ALDOR)
  section rule:
    if $(EntryPoint):
      # This is a program.
      %.c %.ao: %.as $(ALDOR)
        $(ALDOR)			\
          -B$(stagingdir)		\
          -Fao -Fc			\
          -Mno-ALDOR_W_NotCreatingFile	\
          -Mno-ALDOR_W_WillObsolete	\
          $(AFLAGS)			\
          $(ALDOROPT)			\
          $(USERFLAGS)			\
          -I$(curdir)/include		\
          -I$(includedir)		\
          $<

    else
      # Otherwise, it's a library.
      %.c %.ao: %.as $(ALDOR)
        $(AR) cr lib$(Name)_$*.al $(dependencies-local $*.ao)
        $(ALDOR)			\
          -Fao -Fc			\
          -Mno-ALDOR_W_WillObsolete	\
          -L$(AldorName)Lib=$(Name)_$*	\
          $(AFLAGS)			\
          $(ALDOROPT)			\
          $(USERFLAGS)			\
          -I$(curdir)/include		\
          -I$(includedir)		\
          -DBuild$(AldorName)Lib	\
          $<
        rm -f lib$(Name)_$*.al


# C main() function.
%main.c: %.ao $(ALDOR)
  $(ALDOR)				\
    -Fmain				\
    -Mno-ALDOR_W_NotCreatingFile	\
    -Mno-ALDOR_W_WillObsolete		\
    $<
  mv aldormain.c $@



###########################################################
# :: Common Aldor target setup.
###########################################################

private.deplibs () =
  foreach (r, $(Aldor-Requires)):
    value $(libdir)/lib$r.al $(libdir)/$(libname $r)


aldor-target () =
  C-Requires		= m runtime $(Aldor-Requires)
  Languages		= c
  MainLanguage		= c

  Sources		+= $(addsuffix .c, $(Domains))

  private.DEPLIBS	= $(deplibs)

  # Actual Aldor sources to be compiled.
  private.ASOURCES	= $(addsuffix .as, $(Domains) $(InternalDomains))
  # Other Aldor source files to be included.
  private.INCLUDES	= $(addsuffix .as, $(Includes) $(Interfaces))

  if $(file-exists .depend.om):
    .SCANNER: scan-aldor: $(ASOURCES) $(INCLUDES) .depend.om
      cat .depend.om
      echo $"$(addsuffix .ao, $(InternalDomains) $(Domains)): $(DEPLIBS) $(EXTRADEP)"
  else
    .SCANNER: scan-aldor: $(ASOURCES) $(INCLUDES) $(scriptdir)/aldep
      #$(scriptdir)/aldep $(ASOURCES)
      echo $"$(addsuffix .ao, $(InternalDomains) $(Domains)): $(DEPLIBS) $(EXTRADEP)"

  %.c %.ao: :scanner: scan-aldor


  curdir = $(dir .)

  export
