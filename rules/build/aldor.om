.STATIC:
  ALDOR			= $(check-prog aldor)

RUNALDOR		= $(ALDOR) -B$(stagingdir)

ALDOROPT		= -Q8 -Qinline-all
EXTRADEP		= $(EMPTY)

AldorName		= $`(capitalize $(Name))
EntryPoint		= $(EMPTY)
Domains[]		= $(EMPTY)
InternalDomains[]	= $(EMPTY)
Requires[]		= $(EMPTY)
Interfaces[]		= $(EMPTY)
Includes[]		= $(EMPTY)

setenv (ALDOR_TERM, Aldor xterm)
setenv (ALDOR_TERMINFO, $(absname $(includedir)/sample.terminfo))


dependencies-local (target) =
  .STATIC: :key: $(fullname $(target))
    DEPS		= $(EMPTY)
    LOCALDOMAINS	= $(basename $(InternalDomains) $(Domains))
    foreach (d, $(dependencies-all $(target))):
      if $(equal .ao, $(suffix $d)):
        if $(mem $(basename $(removesuffix $d)), $(LOCALDOMAINS)):
          DEPS = $(DEPS) $d
          export
        export
      export
    #eprintln ($"$(target) -> $(DEPS)")
    result = $(file-sort .BUILDORDER, $(filter-out $(target), $(DEPS)))
  value $(result)


%.c %.ao: %.as $(ALDOR)
  section rule:
    if $(EntryPoint):
      %.c %.ao: %.as $(ALDOR)
        $(ALDOR)			\
          -B$(stagingdir)		\
          -Fao -Fc			\
          -Mno-ALDOR_W_NotCreatingFile	\
          -Mno-ALDOR_W_WillObsolete	\
          $(ALDOROPT)			\
          $(USERFLAGS)			\
          -I$(curdir)/include		\
          -I$(includedir)		\
          $<

    else
      %.c %.ao: %.as $(ALDOR)
        $(AR) cr lib$(Name)_$*.al $(dependencies-local $*.ao)
        $(ALDOR)			\
          -Fao -Fc			\
          -Mno-ALDOR_W_WillObsolete	\
          -L$(AldorName)Lib=$(Name)_$*	\
          $(ALDOROPT)			\
          $(USERFLAGS)			\
          -I$(curdir)/include		\
          -I$(includedir)		\
          -DBuild$(AldorName)Lib	\
          $<
        rm -f lib$(Name)_$*.al


%main.c: %.ao $(ALDOR)
  $(ALDOR)				\
    -Fmain				\
    -Mno-ALDOR_W_NotCreatingFile	\
    -Mno-ALDOR_W_WillObsolete		\
    $<
  mv aldormain.c $@


private.deplibs () =
  foreach (r, $(Requires)):
    value $(libdir)/lib$r.al $(libdir)/$(libname $r)


private.aldor-target () =
  C-Requires	= m runtime $(Requires)
  Languages	= c
  MainLanguage	= c

  Sources	+= $(addsuffix .c, $(Domains))

  private.DEPLIBS	= $(deplibs)

  private.ASFILES	= $(addsuffix .as, $(InternalDomains) $(Domains))
  private.INTERFACES	= $(addsuffix .as, $(Interfaces))
  private.INCLUDES	= $(addsuffix .as, $(Includes))

  .SCANNER: scan-aldor: $(ASFILES) $(INTERFACES) $(INCLUDES) $(scriptdir)/aldep
    if $(file-exists .depend.om):
      cat .depend.om
    else:
      #$(scriptdir)/aldep $(ASFILES)
    echo $"$(addsuffix .ao, $(InternalDomains) $(Domains)): $(DEPLIBS) $(EXTRADEP)"

  %.c %.ao: :scanner: scan-aldor

  curdir = $(dir .)

  export


aldor-library (tag) =
  aldor-target ()

  # Build only static C libraries for Aldor libraries.
  STATIC = true
  SHARED = false

  private.ALIBRARY	= lib$(Name).al
  private.CLIBRARY	= $(library $(tag))

  $(ALIBRARY): $(addsuffix .ao, $(Domains))
    $(AR) cr $@ $(file-sort .BUILDORDER, $^)

  private.FILES = $(install-target $(includedir), $(addsuffix .as, $(Interfaces)))
  private.FILES += $(install-target $(libdir), $(ALIBRARY))
  private.FILES += $(install-target $(libdir), $(CLIBRARY))

  $(tag): $(FILES)
  value $(FILES)
  export


aldor-program (tag) =
  Requires	+= foam
  Domains	+= $(EntryPoint)

  aldor-target ()

  Sources += $(EntryPoint)main.c

  private.CPROGRAM	= $(program $(tag))

  value $(CPROGRAM)
  export
